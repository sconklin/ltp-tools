<testname=dhcpd_tests.sh>
	<description>
		Test basic functionality of dhcpd server.

	<\description>
	<test_location>
		ltp/testcases/network/dhcpd/dhcpd_tests.sh
	<\test_location>
<\testname>
<testname=ipchains_tests.sh>
	<description>
		Test basic functionality of ipchains.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=ip_tests.sh>
	<description>
		Test basic functionality of ip command in route2 package

	<\description>
	<test_location>
		ltp/testcases/network/iproute/ip_tests.sh
	<\test_location>
<\testname>
<testname=echo601>
	<description>
		Stresses the inetd/xinetd daemon using the `echo` service.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/echo6/echo601
	<\test_location>
<\testname>
<testname=finger601>
	<description>
		test the basic functionality of the `finger` command.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/finger6/finger601
	<\test_location>
<\testname>
<testname=ftp601>
	<description>
		test the basic functionality of the `ftp` command.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=perf_lan6>
	<description>
		Generates LAN traffic using ICMP echo packets.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/perf_lan6
	<\test_location>
<\testname>
<testname=ping601>
	<description>
		test the basic functionality of the `ping` command.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/ping6/ping601
	<\test_location>
<\testname>
<testname=rcp601>
	<description>
		test the basic functionality of the `rcp` command.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=rlogin601>
	<description>
		Tests the basic functionality of `rlogin`.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=rsh601>
	<description>
		test the basic functionality of the `rsh` command.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=rwho601>
	<description>
		test the basic functionality of the rwhod daemon using the

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=sendfile601>
	<description>
		Copy files from server to client using the sendfile()
		function.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/sendfile6/sendfile601
	<\test_location>
<\testname>
<testname=tcpdump6>
	<description>
		test the basic functionality of `tcpdump`.

	<\description>
	<test_location>
		ltp/testcases/network/ipv6/tcpdump6
	<\test_location>
<\testname>
<testname=telnet601>
	<description>
		Tests the basic functionality of `telnet`.

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=mc_cmds>
	<description>
		To determine the stability of the IP Multicast product
		and to verify the accuracy and usablility of IP Multicast
		related publications associated with changes and/or
		additions to command level interfaces for this implementations
		of IP Multicast.

	<\description>
	<test_location>
		ltp/testcases/network/multicast/mc_cmds
	<\test_location>
<\testname>
<testname=mc_commo>
	<description>
		To verify that IP Multicast can be used to send UDP datagrams
		between two or more nodes on the same subnetwork using
		a specific IP Multicast group and a specific port address.

	<\description>
	<test_location>
		ltp/testcases/network/multicast/mc_commo
	<\test_location>
<\testname>
<testname=mc_member>
	<description>
		To verify that two of the new options for level IPPROTO_IP
		Service Interface allow the list of host group memberships
		to be updated properly in response to the JoinHostGroup and
		LeaveHostGroup requests. To test boundary conditions while
		exercising IP Multicast JoinHostGroup and LeaveHostGroup
		Service Interfaces.

	<\description>
	<test_location>
		ltp/testcases/network/multicast/mc_member
	<\test_location>
<\testname>
<testname=mc_opts>
	<description>
		To verify that three of the new options for level IPPROTO_IP
		Service Interface are initially set to the default values as
		defined in the documentation and that each of the new options
		can be set and read properly by the setsockopt and getsockopt
		routines, respectively. To test boundary conditions and to
		generate errors while exercising the IP Multicast Service
		Interface options.

	<\description>
	<test_location>
		ltp/testcases/network/multicast/mc_opts
	<\test_location>
<\testname>
<testname=fsx-linux>
	<description>
		Created by NeXT Software (Apple Computer, Inc.). This test will
		thrash your NFS filesystem and has uncovered numerous bugs within
		the Linux implementation.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/fsx-linux
	<\test_location>
<\testname>
<testname=nfs01>
	<description>
		Stresses NFS by opening a large number of files on a nfs
		mounted filesystem.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfs01
	<\test_location>
<\testname>
<testname=nfs02>
	<description>
		Tests NFS copy of various filesizes, file consistency between copies
		and preservation of write/nowrite permissions.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfs02
	<\test_location>
<\testname>
<testname=nfs03>
	<description>
		Runs the LTP filesystem test: fs_inod, on an NFS mountpoint.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfs03
	<\test_location>
<\testname>
<testname=nfslock01>
	<description>
		Two processes open FLOCK_IDATA file simultaneously
		each one locks odd and even lines of the file simultaneously
		and fill them with '0's and '1's. After they find eof, the
		datafiles are compared.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfslock01
	<\test_location>
<\testname>
<testname=nfsstat01>
	<description>
		Tests the 'nfsstat' command. This test runs locally, so no
		actual network connection is needed.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfsstat01
	<\test_location>
<\testname>
<testname=nfsstress>
	<description>
		This program is designed stress the NFS implimentation.
		Many bugs were uncovered in the AIX operating system
		implimentation of NFS when AIX kernel was built over NFS.
		Source directory on a remote machine (one server many clients)
		NFS-mounted on to a directory on a local machine from which
		the kernel build was initiated. Apparently many defects/bugs
		were uncovered when multiple users tried to build the kernel
		by NFS mounting the kernel source from a remote machine and
		tried to build the kernel on a local machine. AIX build envi-
		ronment is set up to create the object files and executable
		on the local machine.
		This testcase will try to recreate such a senario.
		Spawn N number of threads. Each thread does the following.
		* Create a directory tree.
		* Populate it with ".c" files and makefiles.
		* initate a build. Executable will print hello world when executed
		* clean up all the executables that were created.
		* recurssively remove each subdir and its contents.
		The test is aimed at stressing the NFS client and server.

	<\description>
	<test_location>
		ltp/testcases/network/nfs/nfsstress
	<\test_location>
<\testname>
<testname=rpc01>
	<description>
		Tests for SunRPC API

		Test rpc using file transfers between a client & server

	<\description>
	<test_location>
		ltp/testcases/network/rpc/basic_tests/rpc01
	<\test_location>
<\testname>
<testname=rpcinfo01>
	<description>
		Basic test for the `rpcinfo` command.

	<\description>
	<test_location>
		ltp/testcases/network/rpc/basic_tests/rpcinfo/rpcinfo01
	<\test_location>
<\testname>
<testname=rup01>
	<description>
		Basic test for the `rup` command.

	<\description>
	<test_location>
		ltp/testcases/network/rpc/basic_tests/rup/rup01
	<\test_location>
<\testname>
<testname=rusers01>
	<description>
		Basic test for the `rusers` command.

	<\description>
	<test_location>
		ltp/testcases/network/rpc/basic_tests/rusers/rusers01
	<\test_location>
<\testname>
<testname=accept01-sctp>
	<description>
		Full test for SunRPC and TI-RPC API

		Verify that accept() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=bind01-sctp-udp/tcp>
	<description>
		Verify that bind() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=listen01-sctp-udp/tcp>
	<description>
		Verify that listen() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=recv01-sctp-udp/tcp>
	<description>
		Verify that recv() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=recvfrom01-sctp-udp/tcp>
	<description>
		Verify that recvfrom() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=recvmsg01-sctp-udp/tcp>
	<description>
		Verify that recvmsg() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=send01-sctp-udp/tcp>
	<description>
		Verify that send() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=sendmsg01-sctp-udp/tcp>
	<description>
		Verify that sendmsg() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=sendto01-sctp-udp/tcp>
	<description>
		Verify that sendto() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=setsockopt01-sctp-udp/tcp>
	<description>
		Verify that setsockopt() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=socket01-sctp-udp/tcp>
	<description>
		Verify that socket() returns the proper errno for various failure cases

	<\description>
	<test_location>
	<\test_location>
<\testname>
<testname=ltpSockets.sh>
	<description>
		Run basic socket related tests over UDP, TCP, and Multicast.

	<\description>
	<test_location>
		ltp/testcases/network/sockets/ltpSockets.sh
	<\test_location>
<\testname>
<testname=arp01>
	<description>
		Test the basic functionality of `arp`.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/arp/arp01
	<\test_location>
<\testname>
<testname=echo01>
	<description>
		Stresses the inetd/xinetd daemon using the `echo` service.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/echo/echo01
	<\test_location>
<\testname>
<testname=finger01>
	<description>
		test the basic functionality of the `finger` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/finger/finger01
	<\test_location>
<\testname>
<testname=ftp01>
	<description>
		test the basic functionality of the `ftp` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/ftp/ftp01
	<\test_location>
<\testname>
<testname=host01>
	<description>
		test the basic functionality of the `host` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/host/host01
	<\test_location>
<\testname>
<testname=netstat01>
	<description>
		test the basic functionality of the `netstat` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/netstat/netstat01
	<\test_location>
<\testname>
<testname=perf_lan>
	<description>
		Generates LAN traffic using ICMP echo packets.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/perf_lan
	<\test_location>
<\testname>
<testname=ping01>
	<description>
		test the basic functionality of the `ping` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/ping/ping01
	<\test_location>
<\testname>
<testname=rcp01>
	<description>
		test the basic functionality of the `rcp` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/rcp/rcp01
	<\test_location>
<\testname>
<testname=rdist01>
	<description>
		test the basic functionality of the `rdist` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/rdist/rdist01
	<\test_location>
<\testname>
<testname=rlogin01>
	<description>
		Tests the basic functionality of `rlogin`.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/rlogin/rlogin01
	<\test_location>
<\testname>
<testname=rsh01>
	<description>
		test the basic functionality of the `rsh` command.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/rsh/rsh01
	<\test_location>
<\testname>
<testname=rwho01>
	<description>
		test the basic functionality of the rwhod daemon using the

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/rwho/rwho01
	<\test_location>
<\testname>
<testname=sendfile>
	<description>
		Copy files from server to client using the sendfile()
		function.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/sendfile
	<\test_location>
<\testname>
<testname=tcpdump>
	<description>
		test the basic functionality of `tcpdump`.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/tcpdump
	<\test_location>
<\testname>
<testname=telnet01>
	<description>
		Tests the basic functionality of `telnet`.

	<\description>
	<test_location>
		ltp/testcases/network/tcp_cmds/telnet/telnet01
	<\test_location>
<\testname>
<testname=traceroute_tests.sh>
	<description>
		Test basic functionality of `traceroute` command.

	<\description>
	<test_location>
		ltp/testcases/network/traceroute/traceroute_tests.sh
	<\test_location>
<\testname>
<testname=xinetd>
	<description>
		Test basic functionality of `xinetd` command.
	<\description>
	<test_location>
		ltp/testcases/network/xinetd
	<\test_location>
<\testname>
